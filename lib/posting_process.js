'use strict';
/**
 * @fileOverview This file provides the posting functionality, i.e, posting new links
 * generated by the extension to a host page.
 *
 * Posting Process:
 *
 * 1. The user selects an editable element with a right click.
 * 2. The user clicks a Privly posting application in the resultant context
 *    menu.
 * 3. This script records the target node ID and the host page the link will be posted to.
 * 4. The script opens a posting window and records its ID.
 * 5. The posting application will complete and send this script a message with the Privly URL.
 * 6. On receiving the Privly URL, this script posts the link in the host page via the content scripts
 *    already injected.
 */

/* global data, tabs */
const { data } = require('sdk/self');
var tabs = require('sdk/tabs');
// Privly Namespace
var Privly;
var GLOBALS = this;

/**
 * @namespace Functionality for posting new links to pages.
 */
var postingProcess = {

  /**
   * Flag to determine a pending post.
   */
  pendingPost: false,

  /**
   * Tab that contains the host page.
   */
  postingResultTab: null,

  /**
   * Tab that contains the privly application.
   */
  postingApplicationTab: null,

  /**
   * Selection text when the context menu was clicked.
   * This text is the initial privly application content.
   */
  postingApplicationStartingValue: '',

  /**
   * Host Page URL.
   */
  pageURL: '',

  /**
   * Target DOM node that the user context-clicked to invoke the menu Or
   * the node that contained the privly button.
   * Privly link will be posted in this node.
   */
  targetNodeId: '',

  /**
   * Defines the Context menu. This is called from 'extension.js'.
   *
   * @param {Object} popupButton Privly popup button(defined in privly_ui.js)
   * @param {Object} PrivlyNS Privly Namespace loaded in lib/extension.js
   */
  menuSetup: function(popupButton, PrivlyNS) {

    Privly = PrivlyNS;

    var cm = require('sdk/context-menu');

    cm.Item({
      label: '*Privly* New Message',
      context: cm.PredicateContext(function(context) {
        // Show message option for content editable DOM nodes.
        return context.isEditable;
      }),
      contentScriptFile: [data.url('./content_scripts/posting_process/sendkeys.js'),
                          data.url('./content_scripts/posting_process/context_menu.js')],
      onMessage: postingProcess.postingHandler,
    });

    require('sdk/page-mod').PageMod({
      include: '*',
      contentScriptFile: [data.url(Privly.CONTEXT_MESSENGER),
                          data.url('./content_scripts/posting_process/sendkeys.js'),
                          data.url('./content_scripts/posting_process/post_link.js'),
                          data.url('./content_scripts/posting_process/posting_button.js')],
      onAttach: function(worker) {
        Privly.message.currentAdapter.addWorker(worker);
        Privly.message.addListener(postingProcess.sendBtnStatus);
        Privly.message.addListener(postingProcess.postingHandler);
      },
    });

    // This allows communication between the extension and privly applications.
    // Messages sent by privly application will be read by the content script and will then be
    // forwarded to the extension.
    require('sdk/page-mod').PageMod({
      include: 'chrome://privly/content/privly-applications/Message/new.html',
      contentScriptFile: [data.url(Privly.CONTEXT_MESSENGER),
                          data.url('./content_scripts/posting_process/privly_app.js')],
      contentScriptWhen: 'start',
      onAttach: function(worker) {
        Privly.message.currentAdapter.addWorker(worker);
        Privly.message.addListener(postingProcess.sendInitialContent);
        Privly.message.addListener(postingProcess.receivePrivlyURL);
      },
    });

    // User is notified of a --
    // 1) Pending Post.
    // 2) Error
    // Popups/panels are used to display the message.

    // Pending Post popup
    postingProcess.pendingNotification = require('sdk/panel').Panel({
      contentURL: data.url('./pages/pending.html'),
      contentScriptFile: data.url(Privly.CONTEXT_MESSENGER),
      contentScript: postingProcess.notificationScript('pendingPost'),
      position: popupButton,
      height: 100,
    });

    Privly.message.currentAdapter.addWorker(postingProcess.pendingNotification);

    // Error Popup
    postingProcess.errorNotification = require('sdk/panel').Panel({
      contentURL: data.url('./pages/posting_error.html'),
      contentScriptFile: data.url(Privly.CONTEXT_MESSENGER),
      contentScript: postingProcess.notificationScript('error'),
      position: popupButton,
      height: 130,
    });

    Privly.message.currentAdapter.addWorker(postingProcess.errorNotification);
    Privly.message.addListener(postingProcess.hideNotification);

  },

  /**
   * Returns the Notification Content Script. The script is used to detect 'click' events on the
   * popup
   *
   * @param {String} type Notification type - whether it notifies the user about a 'pending post'
   *                      or an 'error'.
   *
   * @return {String} Content Script
   */
  notificationScript: function(type) {
    return 'window.addEventListener("click", function(event) {' +
           '  Privly.message.messageExtension({' +
           '    name: "notificationClick",' +
           '    content: "' + type + '",' +
           '  });' +
           '}, false);';
  },

  /**
   * Handles messages from the notification content script. On 'click', the notification
   * panel/popup sends a message to the extension, which then hides the popup.
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  hideNotification: function(message, sendResponse) {
    if (message.name === 'notificationClick') {
      if (message.content === 'error') {
        postingProcess.errorNotification.hide();
      }
      if (message.content === 'pendingPost') {
        postingProcess.pendingNotification.hide();
      }
    }
  },

  /**
   * Sends the Privly button status to the content script.
   * Called on receipt of 'requestBtnStatus'.
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  sendBtnStatus: function(message, sendResponse) {
    if (message.name === 'requestBtnStatus') {
      var btnStatus;
      if (Privly.options.isPrivlyButtonEnabled() === true) {
        btnStatus = 'unchecked';
      } else {
        btnStatus = 'checked';
      }
      sendResponse({name: 'privlyBtnStatus', content: btnStatus});
    }
  },

  /**
   * Sends the initial content to the privly-application.
   * Called on receipt of 'requestInitialContent'
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  sendInitialContent: function(message, sendResponse) {
    if (message.name === 'requestInitialContent') {
      sendResponse({
        name: 'initialContent',
        content: {
          initialContent: postingProcess.postingApplicationStartingValue,
        },
      });
    }
  },

  /**
   * Handles the receipt of Privly URLs from the posting application
   * for addition to the host page.
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  receivePrivlyURL: function(message, sendResponse) {

    if (message.name === 'setPrivlyURL') {
      if (postingProcess.postingResultTab !== null) {

        var resultTab = postingProcess.postingResultTab;

        //Switches to the result tab
        resultTab.activate();

        Privly.message.messageContentScripts({
          name: 'postURL',
          content: {
            nodeId: postingProcess.targetNodeId,
            privlyURL: message.content,
            pageURL: postingProcess.pageURL,
          },
        }, true).then(postingProcess.postStatusHandler);
      }
    }
  },

  /**
   * Called when the privly link is posted in the host page.
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  postStatusHandler: function(message, sendResponse) {

    if (message.name === 'postStatus') {
      if (message.content === 'success') {
        // Close the privly application window/tab on a successful post.
        postingProcess.postingApplicationTab.close();
      } else if (message.content === 'failure') {
        // Notify the user of an error.
        postingProcess.errorNotification.show();
      }
      postingProcess.endPostingProcess();
    }
  },

  /**
   * Handles click events on the context menu item/privly button.
   *
   * @param {String} message Message
   * @param {Function} sendResponse Function used to send a response back.
   */
  postingHandler: function(message, sendResponse) {

    if (message.name === 'startPostingProcess') {
      var sourceTab = tabs.activeTab;
      var postingApplicationName = 'Message';

      if (postingProcess.pendingPost === false) {

        postingProcess.pageURL = message.content.pageURL;
        postingProcess.targetNodeId = message.content.nodeId;
        postingProcess.pendingPost = true;

        var postingDomain = Privly.options.getServerUrl();
        var postingApplicationUrl = 'chrome://privly/content/privly-applications/' +
                                    postingApplicationName + '/new.html';
        postingProcess.postingApplicationStartingValue = message.content.text;

        postingProcess.postingResultTab = sourceTab;

        // Open the application in a new window
        tabs.open({
          url: postingApplicationUrl,
          inNewWindow: true,
          onOpen: function(tab) {
            postingProcess.postingApplicationTab = tab;
            postingProcess.postingApplicationTab.on('close', function(tab) {
              postingProcess.tabClosed(tab, 'postingApplication');
            });
          },
        });

        postingProcess.postingResultTab.on('close', function(tab) {
          postingProcess.tabClosed(tab, 'resultTab');
        });

      } else {
        // Notify the user of a pending post.
        postingProcess.pendingNotification.show();
      }
    }
  },

  /**
   * Cleanup - clears the posting variables once the posting process is complete.
   */
  endPostingProcess: function() {
    postingProcess.pendingPost = false;
    postingProcess.postingResultTab = null;
    postingProcess.postingApplicationTab = null;
    postingProcess.postingApplicationStartingValue = '';
  },

  /**
   * Handles closure of the Host page tab or Privly application tab.
   *
   * @param {Object} tab Host page tab or Privly Application tab.
   * @param {string} type 'resultTab' or 'postingApplication'.
   */
  tabClosed: function(tab, type) {

    if (postingProcess.postingApplicationTab === null ||
        postingProcess.postingResultTab === null) {
      return;
    }

    // The tab receiving the URL is closed.
    if (type === 'resultTab') {
      postingProcess.postingApplicationTab.close();
    }
    postingProcess.endPostingProcess();
  },

  /**
   * Returns the coverage data for this file/module when tested.
   */
  coverage: function() {
    var cv = require('./coverage_var.js').coverageVar;
    return GLOBALS[cv.generate('posting_process.js')];
  }

};
exports.postingProcess = postingProcess;
